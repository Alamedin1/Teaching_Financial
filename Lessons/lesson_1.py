#### Программа для автоматизации и анализаданных ####
        
        ## Списки ##

#-----------------------------------------------------------
"""

# Пустой список можно создать двумя способами - оператором [] и функцией list().
lst = []
print(lst)

print([])
print(list())

notes = [5,4,5,6,8]
print(notes)

#Элементы списков нумеруются, начиная с 0. Мы можем получить доступ к элементу списка по его индексу.
student_1 = ['Pijicov', 1999, 4.2]
print(student_1)
print(student_1[0], student_1[2], student_1[-1])

#Давайте создадим еще одного студента по аналогии со student1 и положим этих двух студентов в еще один список.
student_2 = ['Ksatkin', 2000, 3.7]
students = [student_1, student_2]
print(students)

#Ксати, индексация работает и в строках. Там отдельными элементами являются символы.
w = 'words'
print(w[1], w[-1])

#Мы можем узнать длину списка с помощью функции len() (работает и для строк).
print(len(student_1))
print(len(w))

#Изменение списка
student_1[2] = 4.3
print(student_1)

students = ['Shabalin', 'Saharov', 'Popov']
print(students)

        # Строки неизменяемый тип данных поэтому:
# st = 'beautiful'
# st[2] = 'e'
        #Выдаст ошибку о неизменяем типе данных

# Проверка на наличие элемента
print ('Shabalin' in students)


lst = [1,2,3, 'Shastie']

print(lst)
lst.append('yed') # lst += [6]
print(lst)
lst.remove("Shastie")
print(lst)
x = lst.pop(0)  # аргумент - индекс объекта. Результат операции можно сохранить в переменную (только один объект)
print(lst)
print(x)

#Поиском в списках занимается метод .index(), который вернет индекс объекта, переданного в качестве аргумента.
print(lst.index('Shastie'))
#Если говорить еще о полезных методах, то это .count(), который подсчитывает количество элементов
print(lst.count('Shastie'))
#reverse(), который разворачивает список. Ниже еще отдельно поговорим о сортировке.
lst.reverse()
print(lst)

# Отдельно следует рассказать про метод sort(). Метод производит сортировку списка. Задачи сортировки - очень распространены в программировании. 
# В общем случае, они сводятся к выстроению элементов списка в заданном порядке. 
# В Python есть встроенные методы для сортировки объектов для того, чтобы программист мог не усложнять себе задачу написанием алгоритма сортировки. 
# Метод list.sort() - как раз, один из таких случаев.
test_list = [23, 2, 4, 9]
print(test_list)
test_list.sort()
print(test_list)

test_list.sort(reverse=True)
"""
#-----------------------------------------------------------

        ## Кортежи (tuple) ##


#-----------------------------------------------------------
"""
#Кортежи очень похожи на списки.
student = ('Ivan Ivanov', 2001, 7.5, True)
print(student)
print(type(student))
#Пустой кортеж можно создать с помощью оператора () либо функции tuple.
print(())
print(tuple())
#Основное отличие кортежей от списков состоит в том, что кортежи нельзя изменять (да-да, прямо как строки).

# student[1] = 2002
# print(student)    

# Списки и кортежи могут быть вложены друг в друга.
# Например, пусть в информации о студенте у нас будет храниться не его средний балл, а список всех его оценок.
student = ('Ivan Ivanov', 2001, [8, 7, 7, 9, 6], True)
print(student)
#Мы можем обратиться к элементу вложенного списка или кортежа с помощью двойной индексации.
student[2][1] = 10
print(student)

#В работе со списками есть важный момент, на который нужно обращать внимание. 
a = [1, 2, 3]
b = a 
b[0] = 4
print(a, b)
# Почему так происходит?
# Дело в том, что переменная a ссылается на место в памяти, где хранится список [1, 2, 3]. 
# И когда мы пишем, что b = a, b начинает указывать на то же самое место. То есть образуется два имени для одного и того же кусочка данных. 
# И после изменения этого кусочка через переменную b, значение переменной a тоже меняется!

# Как это исправить? Нужно создать копию списка a! В этом нам поможет метод .copy()
a = [1, 2, 3]
b = a.copy() # теперь переменная b указывает на другой список, который хранится в другом кусочке памяти
b[0] = 4
print(a, b)
#Копию можно создавать и с помощью пустого среза
a = [1, 2, 3]
b = a[:] # по умолчанию берется срез от первого элемента до последнего, то есть копируется весь список a
b[0] = 4
print(a, b)

#-----------------------------------------------------------

        ## Методы .split(), .join(), функция map(), вывод и ввод списков##

#-----------------------------------------------------------
# Метод строки .split() получает на вход строку-разделитель и возвращает список строк, разбитый по этому разделителю.
# По умолчанию метод разбивает строку по пробелу

print('Hello darkness my old friend     !#$@%$^#         bhfdsajklfgdsajk'.split())
print('Ночь. Улица. Фонарь. Аптека'.split('. '))

# Метод .join() ведет себя с точностью до наоборот - он склеивает массив в строку, вставляя между элементами строку-разделитель.
print('-'.join(['8', '800', '555', '35', '35']))

# Функция map() берет функцию и последовательность и применяет эту функцию ко всем ее элементам (map() всегда будет ожидать от вас два аргумента).

# Обратите внимание, чтобы увидеть результат работы этой функции надо дополнительно вручную преобразовать в список (или в кортеж, в зависимости от ваших целей).
print(map(bool, [9, 0, 8, -288, 998, 0])) # не совсем то, что надо
print(list(map(bool, [9, None, 8, -288, 998, 0]))) # а теперь работает, каждое число преобразовалось в логическую переменную
"""
#-----------------------------------------------------------

        ## Множества ##

#-----------------------------------------------------------

# Множества хранят некоторое количество объектов, но, в отличие от списка, один объект может храниться в множестве не более одного раза. Кроме того, порядок элементов множества произволен, им нельзя управлять.

# Тип называется set, это же является конструктором типа, т.е. в функцию set можно передать произвольную последовательность, и из этой последовательности будет построено множество:


#-----------------------------------------------------------







